# Generated by Django 2.0.6 on 2018-06-12 07:45

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations


def create_role(Role, default_form, service, role_name, description, hidden, position):
    try:
        metadata_form = service.form_join_set.get(role=role_name).form
    except ObjectDoesNotExist:
        metadata_form = default_form
    role = Role.objects.create(
        service=service,
        name=role_name,
        description=description,
        hidden=hidden,
        position=position,
        metadata_form=metadata_form,
    )
    # Add behaviours for the role from the service
    role.behaviours.add(
        *service.behaviour_join_set.filter(role=role_name).values_list("behaviour", flat=True)
    )
    # Add the role to any grants and requests
    service.grants.filter(role_old=role_name).update(role_new=role)
    service.requests.filter(role_old=role_name).update(role_new=role)
    return role


def create_user_role(Role, default_form, service):
    return create_role(Role, default_form, service, "USER", "Standard user role", False, 100)


def create_view_users_role(ContentType, Permission, Role, default_form, service, user_role):
    role = create_role(
        Role,
        default_form,
        service,
        "VIEW_USERS",
        "Permits a user to view users with the USER role",
        True,
        200,
    )
    # Grant the role permission to view users with the USER role
    role.object_permissions.create(
        permission=Permission.objects.get_or_create(
            content_type=ContentType.objects.get_for_model(Role),
            codename="view_users_role",
            defaults=dict(name="Can view users with role"),
        )[0],
        content_type=ContentType.objects.get_for_model(Role),
        object_pk=user_role.pk,
    )
    return role


def create_approvers_role(ContentType, Permission, Role, Request, default_form, service, user_role):
    role = create_role(
        Role,
        default_form,
        service,
        "APPROVER",
        "Permits a user to approve requests for the USER role",
        True,
        300,
    )
    # Grant the role permission to decide requests for the USER role
    role.object_permissions.create(
        permission=Permission.objects.get_or_create(
            content_type=ContentType.objects.get_for_model(Request),
            codename="decide_request",
            defaults=dict(name="Can make decisions on requests"),
        )[0],
        content_type=ContentType.objects.get_for_model(Role),
        object_pk=user_role.pk,
    )
    # Also grant permission to send messages to users with the USER role
    role.object_permissions.create(
        permission=Permission.objects.get_or_create(
            content_type=ContentType.objects.get_for_model(Role),
            codename="send_message_role",
            defaults=dict(name="Can send messages to users with role"),
        )[0],
        content_type=ContentType.objects.get_for_model(Role),
        object_pk=user_role.pk,
    )
    return role


def migrate(apps, schema_editor):
    """
    Forward migration that replicates the previous setup by creating USER,
    VIEW_USERS and APPROVER roles for each existing service, sets the related
    permissions, metadata forms and behaviours and updates any existing grants
    to point to the role.

    We don't provide a backward migration as there will not be a sensible
    mapping for all roles.
    """
    # Create the default empty metadata form
    Form = apps.get_model("jasmin_metadata", "Form")
    default_form = Form.objects.create(name="Default Form")
    # Fetch the jasmin_services models
    Service = apps.get_model("jasmin_services", "Service")
    Role = apps.get_model("jasmin_services", "Role")
    Request = apps.get_model("jasmin_services", "Request")
    # We also need the Permission and ContentType models
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    # Process the services
    for service in Service.objects.all():
        user_role = create_user_role(Role, default_form, service)
        create_view_users_role(ContentType, Permission, Role, default_form, service, user_role)
        create_approvers_role(
            ContentType, Permission, Role, Request, default_form, service, user_role
        )


class Migration(migrations.Migration):
    dependencies = [
        ("jasmin_services", "0006_flexible_roles_additions"),
    ]

    operations = [
        migrations.RunPython(migrate),
    ]
