# Generated by Django 2.2.9 on 2022-01-16 13:37

from django.db import migrations


def migrate_service(RoleContentType, permission, service):
    user_role = service.roles.get(name="USER")
    deputy_role = service.roles.get(name="DEPUTY")
    manager_role = service.roles.get(name="MANAGER")

    # Add "grant role" permission for the USER role to DEPUTY
    deputy_role.object_permissions.get_or_create(
        permission=permission, content_type=RoleContentType, object_pk=user_role.pk
    )

    # Add "grant role" permission for the USER and DEPUTY role to MANAGER
    manager_role.object_permissions.get_or_create(
        permission=permission, content_type=RoleContentType, object_pk=user_role.pk
    )
    manager_role.object_permissions.get_or_create(
        permission=permission, content_type=RoleContentType, object_pk=deputy_role.pk
    )


def migrate(apps, schema_editor):
    """
    Forward migration that adds the grant role permission to DEPUTY and MANAGER.

    We don't provide a backward migration as the operations cannot be fully undone
    without storing extra information.
    """
    Service = apps.get_model("jasmin_services", "Service")
    Role = apps.get_model("jasmin_services", "Role")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")
    RoleContentType = ContentType.objects.get_for_model(Role)

    permission, _ = Permission.objects.get_or_create(
        content_type=RoleContentType,
        codename="grant_role",
        defaults=dict(name="Can create a grant for this role"),
    )
    # Process each service in turn
    for service in Service.objects.all():
        migrate_service(RoleContentType, permission, service)


class Migration(migrations.Migration):
    dependencies = [
        ("jasmin_services", "0017_auto_20220207_1359"),
    ]

    operations = [
        migrations.RunPython(migrate),
    ]
